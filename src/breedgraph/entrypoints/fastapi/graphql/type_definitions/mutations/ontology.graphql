# waiting on @oneof directive for ariadne to solve this more elegantly
# see https://github.com/graphql/graphql-wg/pull/1105
# and https://github.com/mirumee/ariadne/issues/1194

enum VersionChange {MAJOR, MINOR, PATCH}

input TermInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    """People stored in the database that established this entry"""
    authorIds: [Int]
    """References stored in the database for additional details, e.g. a link to another ontology."""
    referenceIds: [Int]
    """
    To establish a hierarchy and relationships among terms.
    Parents or children may be defined for any entry.
    """
    parentIds: [Int]
    childIds: [Int]
    subjectIds: [Int]
    scaleIds: [Int]
    categoryIds: [Int]
    observationMethodIds: [Int]
    traitIds: [Int]
    variableIds: [Int]
    controlMethodIds: [Int]
    conditionIds: [Int]
    factorIds: [Int]
    eventIds: [Int]
    locationTypeIds: [Int]
    layoutTypeIDs: [Int]
    designIds: [Int]
    roleIds: [Int]
    titleIds: [Int]
}

input SubjectInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    traitIds: [Int]
    conditionIds: [Int]
}

input TraitInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    When creating a trait, subjects must be specified by ID
    """
    subjectIds: [Int]
}

input ConditionInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
}

input ScaleInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    Scale entries require an additional type parameter.
    """
    scaleType: ScaleType!
    """
    When defining a scale using existing categories, their identifiers may be listed in their proposed rank order.
    """
    categoryIds: [Int]
}

input CategoryInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    When creating a category for an ordinal scale, a rank should be provided.
    """
    rankId: Int
}

input ObservationMethodInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    ObservationMethod entries require an additional type parameter.
    """
    observationType: ObservationMethodType!
}

input VariableInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    When creating a variable, a Trait identifier is required.
    """
    traitId: Int!
    """
    When defining a Variable an ObservationMethod is required.
    """
    observationMethodId: Int!
    """
    When defining a Variable, a Scale identifier is required.
    """
    scaleId: Int!
}

input ControlMethodInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
        """
    ControlMethod entries require an additional type parameter.
    """
    controlType: ControlMethodType!
}

input FactorInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    When creating a factor, a Condition identifier is required.
    """
    conditionId: Int!
    """
    When defining a factor a ControlMethod identifier is required.
    """
    controlMethodId: Int!
    """
    When defining a factor, a Scale identifier is required.
    """
    scaleId: Int!
}

input EventInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    variableIds: [Int]
    factorIds: [Int]
    termIds: [Int]
}

input LocationTypeInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
}

input DesignInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
}

input LayoutTypeInput {
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    """
    When creating a LayoutType, each axis type for position descriptions is required
    """
    axes: [AxisType]!
}

input TermUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    subjectIds: [Int]
    scaleIds: [Int]
    categoryIds: [Int]
    observationMethodIds: [Int]
    traitIds: [Int]
    variableIds: [Int]
    controlMethodIds: [Int]
    conditionIds: [Int]
    factorIds: [Int]
    eventIds: [Int]
    locationTypeIds: [Int]
    layoutTypeIDs: [Int]
    designIds: [Int]
    roleIds: [Int]
    titleIds: [Int]
}

input SubjectUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
}

input TraitUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    subjectIds: [Int]
}

input ConditionUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    subjectIds: [Int]
}

input ScaleUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    scaleType: ScaleType!
    categoryIds: [Int]
}

input CategoryUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    rankId: Int
}

input ObservationMethodUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    observationType: ObservationMethodType!
}

input VariableUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    traitId: Int
    observationMethodId: Int
    scaleId: Int
}

input ControlMethodUpdate {
    id: Int
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    controlType: ControlMethodType
}

input FactorUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    conditionId: Int
    controlMethodId: Int
    scaleId: Int
}

input EventUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    variableIds: [Int]
    factorIds: [Int]
    termIds: [Int]
}

input LocationTypeUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
}

input DesignUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
}

input LayoutTypeUpdate {
    id: Int!
    name: String
    description: String
    abbreviation: String
    synonyms: [String]
    authorIds: [Int]
    referenceIds: [Int]
    parentIds: [Int]
    childIds: [Int]
    termIds: [Int]
    axes: [AxisType]
}


extend type Mutation {
    ontologyCreateTerm(term: TermInput!): BooleanPayload!
    ontologyCreateSubject(subject: SubjectInput!): BooleanPayload!
    ontologyCreateTrait(trait: TraitInput!): BooleanPayload!
    ontologyCreateCondition(condition: ConditionInput!): BooleanPayload!
    ontologyCreateScale(scale: ScaleInput!): BooleanPayload!
    ontologyCreateCategory(category: CategoryInput!): BooleanPayload!
    ontologyCreateObservationMethod(observationMethod: ObservationMethodInput!): BooleanPayload!
    ontologyCreateVariable(variable: VariableInput!): BooleanPayload!
    ontologyCreateControlMethod(controlMethod: ControlMethodInput!): BooleanPayload!
    ontologyCreateFactor(factor: FactorInput!): BooleanPayload!
    ontologyCreateEvent(event: EventInput!): BooleanPayload!
    ontologyCreateLocationType(locationType: LocationTypeInput!): BooleanPayload!
    ontologyCreateDesign(design: DesignInput!): BooleanPayload!
    ontologyCreateLayoutType(layoutType: LayoutTypeInput!): BooleanPayload!
    
    ontologyUpdateTerm(term: TermUpdate!): BooleanPayload!
    ontologyUpdateSubject(subject: SubjectUpdate!): BooleanPayload!
    ontologyUpdateTrait(trait: TraitUpdate!): BooleanPayload!
    ontologyUpdateCondition(condition: ConditionUpdate!): BooleanPayload!
    ontologyUpdateScale(scale: ScaleUpdate!): BooleanPayload!
    ontologyUpdateCategory(category: CategoryUpdate!): BooleanPayload!
    ontologyUpdateObservationMethod(observationMethod: ObservationMethodUpdate!): BooleanPayload!
    ontologyUpdateVariable(variable: VariableUpdate!): BooleanPayload!
    ontologyUpdateControlMethod(controlMethod: ControlMethodUpdate!): BooleanPayload!
    ontologyUpdateFactor(factor: FactorUpdate!): BooleanPayload!
    ontologyUpdateEvent(event: EventUpdate!): BooleanPayload!
    ontologyUpdateLocationType(locationType: LocationTypeUpdate!): BooleanPayload!
    ontologyUpdateDesign(design: DesignUpdate!): BooleanPayload!
    ontologyUpdateLayoutType(layoutType: LayoutTypeUpdate!): BooleanPayload!
    
    ontologyActivateEntries(entryIds: [Int]): BooleanPayload!
    ontologyDeprecateEntries(entryIds: [Int]): BooleanPayload!
    ontologyRemoveEntries(entryIds: [Int]): BooleanPayload!
    ontologyActivateRelationships(relationshipIds: [Int]): BooleanPayload!
    ontologyDeprecateRelationships(relationshipIds: [Int]): BooleanPayload!
    ontologyRemoveRelationships(relationshipIds: [Int]): BooleanPayload!
    ontologyCommitVersion(
        versionChange: VersionChange!,
        comment: String,
        licenceId: Int,
        copyrightId: Int
    ): BooleanPayload!
}