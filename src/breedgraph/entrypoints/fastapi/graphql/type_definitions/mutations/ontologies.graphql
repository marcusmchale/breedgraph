# waiting on @oneof directive for ariadne to solve this more elegantly
# see https://github.com/graphql/graphql-wg/pull/1105
# and https://github.com/mirumee/ariadne/issues/1194

input OntologyEntryInput {
    label: OntologyLabel!
    name: String!
    description: String
    abbreviation: String
    synonyms: [String]
    """People stored in the database that established this entry"""
    authors: [Int]
    """References stored in the database for additional details, e.g. a link to another ontology."""
    references: [Int]
    """
    To establish a hierarchy and relationships among terms.
    Parents or children may be defined for any entry.
    """
    parents: [Int]
    children: [Int]

    """
    Scale and ObservationMethod entries require an additional type parameter,
    ScaleType or ObservationMethodType respectively.
    """
    scale_type: ScaleType
    observation_type: ObservationMethodType
    """
    When defining a scale using existing categories, their identifiers may be listed in their proposed rank order.
    """
    categories: [Int]
    """
    When defining a Variable, Parameter or Event, a Scale identifier is required.
    """
    scale: Int
    """
    When creating a category for an ordinal scale, a rank must be provided.
    """
    rank: Int
    """
    When creating a trait, subjects must be specified by ID
    """
    subjects: [Int]
    """
    When creating a variable, a Trait identifier is required.
    """
    trait: Int
    """
    When defining a Variable an ObservationMethod is required.
    When defining a Parameter a ControlMethod identifier is required.
    When defining an Event, either ObservationMethod or ControlMethod is required.
    """
    method: Int
    """
    When creating a parameter, a Condition identifier is required.
    """
    condition: Int
    """
    When creating an Event, an Exposure identifier is required.
    """
    exposure: Int
    """
    When creating a LayoutType, each axis type for position descriptions is required
    """
    axes: [AxisType]
}

extend type Mutation {
    ontology_create_entry(entry: OntologyEntryInput): BooleanPayload!
}